apply plugin: 'idea'

version = '1.1.0'
def jarVersion = version

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    group = 'org.cf'
    sourceCompatibility = 1.8
    version = parent.version

    jar {
        version = jarVersion
    }

    ext {
        depends = [
            commons_lang: 'org.apache.commons:commons-lang3:3.5',
            findbugs: 'com.google.code.findbugs:jsr305:3.0.1',
            guava: 'com.google.guava:guava:19.0',
            junit: 'junit:junit:4.12',
            mockito: 'org.mockito:mockito-core:1.10.19',
            perfidix: 'org.perfidix:perfidix:3.6.9',
            proguard_gradle: 'net.sf.proguard:proguard-gradle:5.2.1',
            slf4j_api: 'org.slf4j:slf4j-api:1.7.21',
            slf4j_nop: 'org.slf4j:slf4j-nop:1.7.21',
            trove4j: 'net.sf.trove4j:trove4j:3.0.3',
         ]
    }

    tasks.withType(JavaCompile) {
        options.fork = true
        //options.incremental = true
    }

    tasks.withType(Test) {
        maxParallelForks = Runtime.runtime.availableProcessors() / 2
        minHeapSize = '128m'
    }
}


task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'

    ext.targetProjects = subprojects - project(':demoapp')
    dependsOn(ext.targetProjects.test)

    sourceDirectories = files(ext.targetProjects.sourceSets.main.allJava.srcDirs)
    classDirectories = files(ext.targetProjects.sourceSets.main.output.classesDir)
    executionData = files(ext.targetProjects.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

coveralls {
    // Exclude demoapp from Coveralls reporting
    ext.targetProjects = subprojects - project(':demoapp')
    sourceDirs = ext.targetProjects.sourceSets.main.allJava.srcDirs
    jacocoReportPath = "simplify/build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

if (System.env.TRAVIS == 'true') {
    allprojects {
        tasks.withType(Test) {
            testLogging {
                // Print out test status to make it easier to debug problematic builds.
                events "started", "passed", "skipped", "failed"
            }

            /*
             * Tests are memory intensive and TravisCI only has 3-4 GB available. If we go over, test fails.
             * Low min heap size so that each fork doesn't get the huge default heap size.
             * Also, fork frequently to get a fresh heap in case of memory leaks.
             * Using larger values doesn't seem to improve test performance.
            */
            maxParallelForks = 2
            minHeapSize = '128m'
            forkEvery = 10
        }
    }
}
