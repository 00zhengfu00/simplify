buildscript {
    repositories {
    	mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.0.3'
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'idea'
}

subprojects {
    group = 'org.cf'

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'com.github.johnrengelman.shadow'

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
}

// Thanks https://csiebler.github.io/blog/2014/02/09/multi-project-code-coverage-using-gradle-and-jacoco/
task codeCoverageReport(type: JacocoReport) {
    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
       sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        html.enabled = true
        html.destination = "${buildDir}/reports/jacoco"
        csv.enabled = false
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}
